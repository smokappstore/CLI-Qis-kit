# Makefile para Qiskit Runtime CLI Qis-kit
# by SmokAppSoftware jako with Claude AI, Gemini AI, COPILOT
# Versi√≥n 2.2

.PHONY: help install install-dev install-minimal run clean test format lint docs

# Colores para output
GREEN := \033[0;32m
YELLOW := \033[0;33m
RED := \033[0;31m
NC := \033[0m # No Color

# Variables
PYTHON := python3
PIP := $(PYTHON) -m pip
PROJECT_NAME := qiskit-runtime-cli

help: ## Muestra esta ayuda
	@echo "$(GREEN)Qiskit Runtime CLI - Comandos disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'

install: ## Instalaci√≥n completa (simulador + IBM Quantum)
	@echo "$(GREEN)üöÄ Instalando Qiskit Runtime CLI (completo)...$(NC)"
	$(PIP) install -r requirements.txt
	@echo "$(GREEN)‚úÖ Instalaci√≥n completada$(NC)"

install-dev: ## Instalaci√≥n para desarrollo (incluye herramientas de testing)
	@echo "$(GREEN)üõ†Ô∏è  Instalando para desarrollo...$(NC)"
	$(PIP) install -r requirements.txt
	$(PIP) install pytest pytest-cov black flake8 mypy
	@echo "$(GREEN)‚úÖ Instalaci√≥n de desarrollo completada$(NC)"

install-minimal: ## Instalaci√≥n m√≠nima (solo simulador local)
	@echo "$(GREEN)üì¶ Instalaci√≥n m√≠nima...$(NC)"
	$(PIP) install qiskit qiskit-aer matplotlib numpy Pillow
	@echo "$(GREEN)‚úÖ Instalaci√≥n m√≠nima completada$(NC)"

install-setup: ## Instala usando setup.py
	@echo "$(GREEN)üì¶ Instalando con setup.py...$(NC)"
	$(PYTHON) setup.py install
	@echo "$(GREEN)‚úÖ Instalaci√≥n con setup.py completada$(NC)"

run: ## Ejecuta la CLI principal
	@echo "$(GREEN)üöÄ Iniciando Qiskit Runtime CLI...$(NC)"
	$(PYTHON) main.py

run-installer: ## Ejecuta el instalador autom√°tico
	@echo "$(GREEN)üîß Ejecutando instalador autom√°tico...$(NC)"
	$(PYTHON) install.py

run-original: ## Ejecuta la CLI original (solo IBM)
	@echo "$(GREEN)‚òÅÔ∏è  Iniciando CLI original (IBM Quantum)...$(NC)"
	$(PYTHON) qiskit_cli.py

run-local: ## Ejecuta la CLI con simulador local
	@echo "$(GREEN)üñ•Ô∏è  Iniciando CLI con simulador local...$(NC)"
	$(PYTHON) run_cli.py

clean: ## Limpia archivos generados
	@echo "$(YELLOW)üßπ Limpiando archivos generados...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name "build" -exec rm -rf {} +
	find . -type d -name "dist" -exec rm -rf {} +
	rm -f qiskit-cli.py
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

test: ## Ejecuta las pruebas
	@echo "$(GREEN)üß™ Ejecutando pruebas...$(NC)"
	$(PYTHON) -m pytest tests/ -v --cov=. --cov-report=term-missing
	@echo "$(GREEN)‚úÖ Pruebas completadas$(NC)"

test-simple: ## Prueba simple de funcionamiento
	@echo "$(GREEN)üîç Verificando funcionamiento b√°sico...$(NC)"
	$(PYTHON) -c "import main; print('‚úÖ main.py importa correctamente')"
	$(PYTHON) -c "import qiskit_cli; print('‚úÖ qiskit_cli.py importa correctamente')" 
	$(PYTHON) -c "import run_cli; print('‚úÖ run_cli.py importa correctamente')"
	@echo "$(GREEN)‚úÖ Verificaci√≥n b√°sica completada$(NC)"

format: ## Formatea el c√≥digo con black
	@echo "$(GREEN)üé® Formateando c√≥digo...$(NC)"
	$(PYTHON) -m black *.py --line-length 100
	@echo "$(GREEN)‚úÖ Formateo completado$(NC)"

lint: ## Verifica el c√≥digo con flake8
	@echo "$(GREEN)üîç Verificando c√≥digo...$(NC)"
	$(PYTHON) -m flake8 *.py --max-line-length=100 --ignore=E203,W503
	@echo "$(GREEN)‚úÖ Verificaci√≥n completada$(NC)"

type-check: ## Verifica tipos con mypy
	@echo "$(GREEN)üîç Verificando tipos...$(NC)"
	$(PYTHON) -m mypy *.py --ignore-missing-imports
	@echo "$(GREEN)‚úÖ Verificaci√≥n de tipos completada$(NC)"

check-deps: ## Verifica las dependencias instaladas
	@echo "$(GREEN)üìã Verificando dependencias...$(NC)"
	@$(PYTHON) -c "import qiskit; print('‚úÖ Qiskit:', qiskit.__version__)" || echo "$(RED)‚ùå Qiskit no instalado$(NC)"
	@$(PYTHON) -c "import qiskit_aer; print('‚úÖ Qiskit Aer:', qiskit_aer.__version__)" || echo "$(YELLOW)‚ö†Ô∏è  Qiskit Aer no instalado$(NC)"
	@$(PYTHON) -c "import qiskit_ibm_runtime; print('‚úÖ IBM Runtime:', qiskit_ibm_runtime.__version__)" || echo "$(YELLOW)‚ö†Ô∏è  IBM Runtime no instalado$(NC)"
	@$(PYTHON) -c "import matplotlib; print('‚úÖ Matplotlib:', matplotlib.__version__)" || echo "$(YELLOW)‚ö†Ô∏è  Matplotlib no instalado$(NC)"
	@$(PYTHON) -c "import numpy; print('‚úÖ NumPy:', numpy.__version__)" || echo "$(YELLOW)‚ö†Ô∏è  NumPy no instalado$(NC)"

build: ## Construye el paquete para distribuci√≥n
	@echo "$(GREEN)üì¶ Construyendo paquete...$(NC)"
	$(PYTHON) setup.py sdist bdist_wheel
	@echo "$(GREEN)‚úÖ Paquete construido en dist/$(NC)"

upload-test: ## Sube el paquete a TestPyPI
	@echo "$(YELLOW)üì§ Subiendo a TestPyPI...$(NC)"
	$(PYTHON) -m twine upload --repository testpypi dist/*
	@echo "$(GREEN)‚úÖ Subido a TestPyPI$(NC)"

upload: ## Sube el paquete a PyPI (producci√≥n)
	@echo "$(RED)üì§ Subiendo a PyPI (PRODUCCI√ìN)...$(NC)"
	$(PYTHON) -m twine upload dist/*
	@echo "$(GREEN)‚úÖ Subido a PyPI$(NC)"

docs: ## Genera documentaci√≥n
	@echo "$(GREEN)üìö Generando documentaci√≥n...$(NC)"
	@echo "README.md ya existe como documentaci√≥n principal"
	@echo "Para m√°s documentaci√≥n, considera usar Sphinx"
	@echo "$(GREEN)‚úÖ Documentaci√≥n lista$(NC)"

demo: ## Ejecuta la CLI en modo demo
	@echo "$(GREEN)üéØ Iniciando demo de Qiskit CLI...$(NC)"
	@echo "Ejecuta 'demo' dentro de la CLI para ver ejemplos"
	$(PYTHON) main.py

create-launcher: ## Crea un script launcher ejecutable
	@echo "$(GREEN)üîß Creando launcher...$(NC)"
	@echo "#!/usr/bin/env python3" > qiskit-cli.py
	@echo "import sys" >> qiskit-cli.py
	@echo "from pathlib import Path" >> qiskit-cli.py
	@echo "sys.path.insert(0, str(Path(__file__).parent))" >> qiskit-cli.py
	@echo "import main" >> qiskit-cli.py
	@echo "main.main()" >> qiskit-cli.py
	@chmod +x qiskit-cli.py 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Launcher creado: qiskit-cli.py$(NC)"

info: ## Muestra informaci√≥n del proyecto
	@echo "$(GREEN)‚ÑπÔ∏è  Informaci√≥n del proyecto:$(NC)"
	@echo ""
	@echo "Nombre: Qiskit Runtime CLI v2.2"
	@echo "Autor: SmokAppSoftware jako"
	@echo "Descripci√≥n: Constructor de circuitos cu√°nticos interactivo"
	@echo "Python: $(shell python3 --version)"
	@echo "Directorio: $(PWD)"
	@echo ""
	@echo "Archivos principales:"
	@echo "  - main.py           (punto de entrada)"
	@echo "  - qiskit_cli.py     (CLI original - IBM only)"
	@echo "  - run_cli.py        (CLI completa - local + IBM)"
	@echo "  - install.py        (instalador autom√°tico)"
	@echo ""

requirements-freeze: ## Genera requirements.txt actualizado
	@echo "$(GREEN)üìã Generando requirements.txt actualizado...$(NC)"
	$(PIP) freeze > requirements-frozen.txt
	@echo "$(GREEN)‚úÖ requirements-frozen.txt generado$(NC)"

venv: ## Crea un entorno virtual
	@echo "$(GREEN)üêç Creando entorno virtual...$(NC)"
	$(PYTHON) -m venv venv
	@echo "$(GREEN)‚úÖ Entorno virtual creado en ./venv$(NC)"
	@echo "$(YELLOW)Act√≠valo con: source venv/bin/activate (Linux/Mac) o venv\\Scripts\\activate (Windows)$(NC)"

venv-install: venv ## Crea entorno virtual e instala dependencias
	@echo "$(GREEN)üì¶ Instalando en entorno virtual...$(NC)"
	./venv/bin/python -m pip install --upgrade pip
	./venv/bin/python -m pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ Entorno virtual configurado$(NC)"

# Comandos de desarrollo r√°pido
dev: install-dev format lint test-simple ## Setup completo de desarrollo

quick-test: ## Test r√°pido sin cobertura
	@echo "$(GREEN)‚ö° Test r√°pido...$(NC)"
	$(PYTHON) main.py --help 2>/dev/null || echo "CLI requiere modo interactivo"
	@echo "$(GREEN)‚úÖ Test r√°pido completado$(NC)"

# Comandos de debugging
debug-main: ## Debug del main.py
	@echo "$(GREEN)üêõ Debug main.py...$(NC)"
	$(PYTHON) -c "import main; print('Dependencies check:'); main.check_dependencies()"

debug-imports: ## Verifica todas las importaciones
	@echo "$(GREEN)üîç Verificando importaciones...$(NC)"
	@$(PYTHON) -c "import sys; print('Python path:', sys.path[0])"
	@$(PYTHON) -c "import main; print('‚úÖ main.py OK')" || echo "$(RED)‚ùå Error en main.py$(NC)"
	@$(PYTHON) -c "import qiskit_cli; print('‚úÖ qiskit_cli.py OK')" || echo "$(RED)‚ùå Error en qiskit_cli.py$(NC)"
	@$(PYTHON) -c "import run_cli; print('‚úÖ run_cli.py OK')" || echo "$(RED)‚ùå Error en run_cli.py$(NC)"

# Comandos de limpieza espec√≠ficos
clean-logs: ## Limpia logs generados
	@echo "$(YELLOW)üóëÔ∏è  Limpiando logs...$(NC)"
	rm -rf ~/.qiskit_cli/logs/*
	@echo "$(GREEN)‚úÖ Logs limpiados$(NC)"

clean-cache: ## Limpia cache de Python
	@echo "$(YELLOW)üóëÔ∏è  Limpiando cache...$(NC)"
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -name "*.pyc" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Cache limpiado$(NC)"

# Meta comando que muestra el estado del proyecto
status: ## Muestra el estado completo del proyecto
	@echo "$(GREEN)üìä Estado del Proyecto Qiskit Runtime CLI$(NC)"
	@echo "=================================================="
	@make info
	@echo ""
	@make check-deps
	@echo ""
	@echo "$(GREEN)üìÅ Archivos del proyecto:$(NC)"
	@ls -la *.py 2>/dev/null || echo "No hay archivos Python"
	@echo ""
	@echo "$(GREEN)üìù Archivos de configuraci√≥n:$(NC)"
	@ls -la requirements.txt setup.py Makefile 2>/dev/null || echo "Archivos de config no encontrados"

# Comando por defecto
all: install test ## Instalaci√≥n completa + tests

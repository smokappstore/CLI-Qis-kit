#!/usr/bin/env python3
"""
Qiskit Runtime CLI - Punto de entrada principal
by SmokAppSoftware jako with Claude AI, Gemini AI, COPILOT
Versi√≥n 2.2 - Constructor de Circuitos Interactivo con Simulador Local

Punto de entrada principal que detecta autom√°ticamente las dependencias disponibles
y ejecuta la versi√≥n apropiada de la CLI.
"""

import sys
import os
from pathlib import Path

def check_dependencies():
    """Verifica qu√© dependencias est√°n disponibles"""
    deps_status = {
        'qiskit': False,
        'qiskit_aer': False,
        'qiskit_ibm_runtime': False,
        'matplotlib': False,
        'numpy': False
    }
    
    # Verificar dependencias b√°sicas
    try:
        import qiskit
        deps_status['qiskit'] = True
        print("‚úÖ Qiskit encontrado")
    except ImportError:
        print("‚ùå Qiskit no encontrado")
        return deps_status
    
    try:
        import qiskit_aer
        deps_status['qiskit_aer'] = True
        print("‚úÖ Qiskit Aer (simulador) encontrado")
    except ImportError:
        print("‚ö†Ô∏è  Qiskit Aer no encontrado - sin simulador local")
    
    try:
        import qiskit_ibm_runtime
        deps_status['qiskit_ibm_runtime'] = True
        print("‚úÖ IBM Quantum Runtime encontrado")
    except ImportError:
        print("‚ö†Ô∏è  IBM Quantum Runtime no encontrado - solo simulador local")
    
    try:
        import matplotlib
        deps_status['matplotlib'] = True
        print("‚úÖ Matplotlib encontrado")
    except ImportError:
        print("‚ö†Ô∏è  Matplotlib no encontrado - sin gr√°ficos")
    
    try:
        import numpy
        deps_status['numpy'] = True
        print("‚úÖ NumPy encontrado")
    except ImportError:
        print("‚ö†Ô∏è  NumPy no encontrado")
    
    return deps_status

def print_installation_guide():
    """Muestra la gu√≠a de instalaci√≥n"""
    print("\n" + "="*60)
    print("üì¶ GU√çA DE INSTALACI√ìN")
    print("="*60)
    print("\nüîß Para funcionalidad completa, instala todas las dependencias:")
    print("\n   pip install -r requirements.txt")
    print("\nüìã O instala manualmente:")
    print("   pip install qiskit qiskit-aer qiskit-ibm-runtime matplotlib numpy")
    print("\nüí° Para uso b√°sico (solo simulador local):")
    print("   pip install qiskit qiskit-aer matplotlib numpy")
    print("\nüåê Para usar hardware cu√°ntico real de IBM:")
    print("   pip install qiskit-ibm-runtime")
    print("   ‚Ä¢ Reg√≠strate en: https://quantum.ibm.com/")
    print("   ‚Ä¢ Obt√©n tu API token del dashboard")
    print("   ‚Ä¢ Usa el comando 'configurar' en la CLI")
    print("\n" + "="*60)

def select_cli_version(deps_status):
    """Selecciona qu√© versi√≥n de la CLI ejecutar basada en las dependencias"""
    
    if not deps_status['qiskit']:
        print("\n‚ùå ERROR: Qiskit es requerido para ejecutar la CLI.")
        print("   Instala con: pip install qiskit")
        return None
    
    # Si tiene todo, usar la versi√≥n completa
    if deps_status['qiskit_aer'] and deps_status['matplotlib'] and deps_status['numpy']:
        if deps_status['qiskit_ibm_runtime']:
            print("\nüöÄ Iniciando CLI completa (Simulador Local + IBM Quantum)")
            return 'run_cli.py'  # Versi√≥n con simulador local y IBM
        else:
            print("\nüñ•Ô∏è  Iniciando CLI con simulador local √∫nicamente")
            return 'run_cli.py'  # Versi√≥n con simulador local
    
    # Si no tiene aer pero s√≠ IBM runtime, usar versi√≥n original
    elif deps_status['qiskit_ibm_runtime']:
        print("\n‚òÅÔ∏è  Iniciando CLI solo con IBM Quantum (sin simulador local)")
        return 'qiskit_cli.py'  # Versi√≥n original solo IBM
    
    else:
        print("\n‚ùå ERROR: Se requiere al menos Qiskit Aer O IBM Runtime para ejecutar la CLI.")
        print_installation_guide()
        return None

def main():
    """Funci√≥n principal"""
    print("üîç Verificando dependencias...")
    print("-" * 40)
    
    deps_status = check_dependencies()
    
    print("-" * 40)
    selected_cli = select_cli_version(deps_status)
    
    if not selected_cli:
        sys.exit(1)
    
    # Verificar que el archivo CLI existe
    cli_path = Path(__file__).parent / selected_cli
    if not cli_path.exists():
        print(f"\n‚ùå ERROR: Archivo {selected_cli} no encontrado.")
        print(f"   Aseg√∫rate de que est√© en el mismo directorio que main.py")
        sys.exit(1)
    
    print(f"\nüéØ Ejecutando: {selected_cli}")
    print("=" * 60 + "\n")
    
    # Importar y ejecutar la CLI seleccionada
    try:
        if selected_cli == 'run_cli.py':
            # Importar y ejecutar la versi√≥n con simulador local
            import run_cli
            run_cli.main()
        else:
            # Importar y ejecutar la versi√≥n original
            import qiskit_cli
            qiskit_cli.main()
    except KeyboardInterrupt:
        print(f"\nüëã ¬°CLI cerrada por el usuario!")
    except Exception as e:
        print(f"\n‚ùå Error al ejecutar la CLI: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
